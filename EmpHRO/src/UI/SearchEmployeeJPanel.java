/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Employee;
import model.EmployeeHistory;
/**
 *
 * @author sumit
 */
public class SearchEmployeeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchEmployeeJPanel
     */
    EmployeeHistory emphistory;
    public SearchEmployeeJPanel(EmployeeHistory emphistory) {
        initComponents();
        this.emphistory = emphistory;
        QueryBylbl.setVisible(false);
        QueryBytf.setVisible(false);
        EmpStartDatejdc.setVisible(false);
        EmpSearchbtn.setVisible(false);
        EmpJTable.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        EmpNamelbl = new javax.swing.JLabel();
        EmpIdlbl = new javax.swing.JLabel();
        EmpEmaillbl = new javax.swing.JLabel();
        EmpNamechk = new javax.swing.JCheckBox();
        EmpIdchk = new javax.swing.JCheckBox();
        EmpEmailchk = new javax.swing.JCheckBox();
        QueryBylbl = new javax.swing.JLabel();
        QueryBytf = new javax.swing.JTextField();
        EmpStartDatejdc = new com.toedter.calendar.JDateChooser();
        EmpSearchbtn = new javax.swing.JButton();
        SearchScrollPane = new javax.swing.JScrollPane();
        EmpJTable = new javax.swing.JTable();
        EmpStartDatelbl = new javax.swing.JLabel();
        EmpStartDatechk = new javax.swing.JCheckBox();

        jTextField1.setText("Search Employee:");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        EmpNamelbl.setText("Employee Name:");

        EmpIdlbl.setText("Employee ID:");

        EmpEmaillbl.setText("Employee Email:");

        EmpNamechk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpNamechkActionPerformed(evt);
            }
        });

        EmpIdchk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpIdchkActionPerformed(evt);
            }
        });

        EmpEmailchk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpEmailchkActionPerformed(evt);
            }
        });

        QueryBylbl.setText("jLabel1");

        EmpSearchbtn.setText("Search");
        EmpSearchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpSearchbtnActionPerformed(evt);
            }
        });

        EmpJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee Name", "Employee ID", "Age", "Gender", "Start Date", "Level", "Team Info", "Position Title", "Cell Phone Number", "Email Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchScrollPane.setViewportView(EmpJTable);

        EmpStartDatelbl.setText("Employee Start Date:");

        EmpStartDatechk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpStartDatechkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(EmpIdlbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(EmpNamelbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(EmpIdchk, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(EmpNamechk, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(EmpEmaillbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(EmpEmailchk))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(EmpStartDatelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(EmpStartDatechk))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(QueryBytf, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(EmpStartDatejdc, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(EmpSearchbtn)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QueryBylbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmpNamelbl)
                    .addComponent(EmpNamechk))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmpIdlbl)
                    .addComponent(EmpIdchk))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmpEmaillbl)
                    .addComponent(EmpEmailchk))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmpStartDatechk)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EmpStartDatelbl)
                        .addGap(8, 8, 8)
                        .addComponent(QueryBylbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(QueryBytf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpStartDatejdc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(EmpSearchbtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(SearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void EmpNamechkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmpNamechkActionPerformed
        // TODO add your handling code here:
        if (EmpNamechk.isSelected()){
        QueryBylbl.setVisible(true);
        QueryBytf.setVisible(true);
        EmpStartDatejdc.setVisible(false);
        EmpSearchbtn.setVisible(true);
        QueryBylbl.setText("Enter Employee Name:");
        }
        if(!EmpNamechk.isSelected()){
            QueryBylbl.setVisible(false);
            QueryBytf.setVisible(false);
            EmpStartDatejdc.setVisible(false);
            EmpSearchbtn.setVisible(false);
            EmpJTable.setVisible(false);
        }
    }//GEN-LAST:event_EmpNamechkActionPerformed

    private void EmpIdchkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmpIdchkActionPerformed
        // TODO add your handling code here:
        if (EmpIdchk.isSelected()){
        QueryBylbl.setVisible(true);
        QueryBytf.setVisible(true);
        EmpStartDatejdc.setVisible(false);
        EmpSearchbtn.setVisible(true);
        QueryBylbl.setText("Enter Employee ID:");
        }
        if(!EmpIdchk.isSelected()){
            QueryBylbl.setVisible(false);
            QueryBytf.setVisible(false);
            EmpStartDatejdc.setVisible(false);
            EmpSearchbtn.setVisible(false);
            EmpJTable.setVisible(false);
        }
    }//GEN-LAST:event_EmpIdchkActionPerformed

    private void EmpEmailchkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmpEmailchkActionPerformed
        // TODO add your handling code here:
        if (EmpEmailchk.isSelected()){
        QueryBylbl.setVisible(true);
        QueryBytf.setVisible(true);
        EmpStartDatejdc.setVisible(false);
        EmpSearchbtn.setVisible(true);
        QueryBylbl.setText("Enter Employee Email:");
        }
        if(!EmpEmailchk.isSelected()){
            QueryBylbl.setVisible(false);
            QueryBytf.setVisible(false);
            EmpStartDatejdc.setVisible(false);
            EmpSearchbtn.setVisible(false);
            EmpJTable.setVisible(false);
        }
    }//GEN-LAST:event_EmpEmailchkActionPerformed

    private void EmpSearchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmpSearchbtnActionPerformed
        // TODO add your handling code here:
        if(QueryBytf.getText().equals("") && EmpStartDatejdc.getDate().equals(""))
        {
            JOptionPane.showMessageDialog(SearchScrollPane, "Please enter search parameter to display");
            return;
        }
        else if (EmpStartDatechk.isSelected())
        {
            populateTable(EmpStartDatejdc.getDate());
        }
        else {
                try {
                    populateTable(EmpNamechk.isSelected() ? QueryBytf.getText() : (EmpIdchk.isSelected() ? QueryBytf.getText() : QueryBytf.getText()));
            } catch (ParseException ex) {
            }
            }
    }//GEN-LAST:event_EmpSearchbtnActionPerformed

    private void EmpStartDatechkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmpStartDatechkActionPerformed
        // TODO add your handling code here:
        if (EmpStartDatechk.isSelected()){
        QueryBylbl.setVisible(false);
        QueryBytf.setVisible(false);
        EmpStartDatejdc.setVisible(true);
        EmpSearchbtn.setVisible(true);
        QueryBylbl.setText("Enter Employee Start Date:");
        }
        if(!EmpStartDatechk.isSelected()){
            QueryBylbl.setVisible(false);
            QueryBytf.setVisible(false);
            EmpStartDatejdc.setVisible(false);
            EmpSearchbtn.setVisible(false);
            EmpJTable.setVisible(false);
        }
    }//GEN-LAST:event_EmpStartDatechkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox EmpEmailchk;
    private javax.swing.JLabel EmpEmaillbl;
    private javax.swing.JCheckBox EmpIdchk;
    private javax.swing.JLabel EmpIdlbl;
    private javax.swing.JTable EmpJTable;
    private javax.swing.JCheckBox EmpNamechk;
    private javax.swing.JLabel EmpNamelbl;
    private javax.swing.JButton EmpSearchbtn;
    private javax.swing.JCheckBox EmpStartDatechk;
    private com.toedter.calendar.JDateChooser EmpStartDatejdc;
    private javax.swing.JLabel EmpStartDatelbl;
    private javax.swing.JLabel QueryBylbl;
    private javax.swing.JTextField QueryBytf;
    private javax.swing.JScrollPane SearchScrollPane;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

        private void populateTable(String text) throws ParseException {
    
        DefaultTableModel model = (DefaultTableModel)EmpJTable.getModel();
        model.setRowCount(0);
        int count = 0;
        ArrayList<Employee> employees = emphistory.getHistory();
        for(Employee employee: employees){
            EmpJTable.setVisible(true);
            String compareString = EmpNamechk.isSelected() ? employee.getEmpName(): (EmpIdchk.isSelected() ? employee.getEmpId() : employee.getEmpEmail());
            if(compareString.equals(text)){
            count++;
            Object[] row = new Object[10];
            row[0] = employee.getEmpName();
            row[1] = employee.getEmpId();
            row[2] = employee.getEmpAge();
            row[3] = employee.getEmpGender();
            row[4] = employee.getEmpStartDate();
            row[5] = employee.getEmpLevel();
            row[6] = employee.getEmpTeam();
            row[7] = employee.getEmpPosition();
            row[8] = employee.getEmpNumber();
            row[9] = employee.getEmpEmail();
            model.addRow(row);
            }
           }
        if(count==0){
            JOptionPane.showMessageDialog(SearchScrollPane, "No Object found");
        }
        }
        private void populateTable(Date date){
    
        DefaultTableModel model = (DefaultTableModel)EmpJTable.getModel();
        model.setRowCount(0);
        ArrayList<Employee> employees = emphistory.getHistory();
        int count=0;
        for(Employee employee: employees){
            EmpJTable.setVisible(true);
            Date compareDate = employee.getEmpStartDate();
            if(compareDate.before(date)){
               count++;
            Object[] row = new Object[10];
            row[0] = employee.getEmpName();
            row[1] = employee.getEmpId();
            row[2] = employee.getEmpAge();
            row[3] = employee.getEmpGender();
            row[4] = employee.getEmpStartDate();
            row[5] = employee.getEmpLevel();
            row[6] = employee.getEmpTeam();
            row[7] = employee.getEmpPosition();
            row[8] = employee.getEmpNumber();
            row[9] = employee.getEmpEmail();
            model.addRow(row);
            }
            
        }
                if(count==0){
            JOptionPane.showMessageDialog(SearchScrollPane, "No Object found");
        }
    }

}
